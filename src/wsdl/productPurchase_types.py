##################################################
# file: productPurchase_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b productPurchase.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:ZSI
##############################

class ns0:
    targetNamespace = "urn:ZSI"

    class productPurchaseInput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "productPurchaseInput"
        schema = "urn:ZSI"
        def __init__(self, **kw):
            ns = ns0.productPurchaseInput_Dec.schema
            TClist = [ZSI.TC.String(pname="CHASSIS", aname="_CHASSIS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="CUSTOMER_ID", aname="_CUSTOMER_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="CUST_MOBILE", aname="_CUST_MOBILE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="CUSTOMER_NAME", aname="_CUSTOMER_NAME", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="CITY", aname="_CITY", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="STATE", aname="_STATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PIN_NO", aname="_PIN_NO", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="PRODUCT_PURCHASE_DATE", aname="_PRODUCT_PURCHASE_DATE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ZSI","productPurchaseInput")
            kw["aname"] = "_productPurchaseInput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CHASSIS = None
                    self._CUSTOMER_ID = None
                    self._CUST_MOBILE = None
                    self._CUSTOMER_NAME = None
                    self._CITY = None
                    self._STATE = None
                    self._PIN_NO = None
                    self._PRODUCT_PURCHASE_DATE = None
                    return
            Holder.__name__ = "productPurchaseInput_Holder"
            self.pyclass = Holder

    class productPurchaseOutput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "productPurchaseOutput"
        schema = "urn:ZSI"
        def __init__(self, **kw):
            ns = ns0.productPurchaseOutput_Dec.schema
            TClist = [ZSI.TC.String(pname="RESPONSE_CODE", aname="_RESPONSE_CODE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:ZSI","productPurchaseOutput")
            kw["aname"] = "_productPurchaseOutput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RESPONSE_CODE = None
                    return
            Holder.__name__ = "productPurchaseOutput_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:ZSI)
