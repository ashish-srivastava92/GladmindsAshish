##################################################
# file: brand_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b brand.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://www.example.org/brand/
##############################

class ns0:
    targetNamespace = "http://www.example.org/brand/"

    class brandInput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "brandInput"
        schema = "http://www.example.org/brand/"
        def __init__(self, **kw):
            ns = ns0.brandInput_Dec.schema
            TClist = [ZSI.TC.String(pname="BRAND_ID", aname="_BRAND_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="BRAND_NAME", aname="_BRAND_NAME", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PRODUCT_TYPE", aname="_PRODUCT_TYPE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PRODUCT_NAME", aname="_PRODUCT_NAME", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.example.org/brand/","brandInput")
            kw["aname"] = "_brandInput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BRAND_ID = None
                    self._BRAND_NAME = None
                    self._PRODUCT_TYPE = None
                    self._PRODUCT_NAME = None
                    return
            Holder.__name__ = "brandInput_Holder"
            self.pyclass = Holder

    class brandOutput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "brandOutput"
        schema = "http://www.example.org/brand/"
        def __init__(self, **kw):
            ns = ns0.brandOutput_Dec.schema
            TClist = [ZSI.TC.String(pname="RESPONSE_CODE", aname="_RESPONSE_CODE", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.example.org/brand/","brandOutput")
            kw["aname"] = "_brandOutput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RESPONSE_CODE = None
                    return
            Holder.__name__ = "brandOutput_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.example.org/brand/)
